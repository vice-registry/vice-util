// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image image
// swagger:model Image

type Image struct {

	// content type
	ContentType string `json:"content-type,omitempty"`

	// environment reference
	EnvironmentReference string `json:"environmentReference,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// image type
	ImageType string `json:"image-type,omitempty"`

	// imported
	Imported bool `json:"imported,omitempty"`

	// origin environment
	OriginEnvironment *Environment `json:"originEnvironment,omitempty"`

	// specifics
	Specifics interface{} `json:"specifics,omitempty"`

	// userid
	Userid string `json:"userid,omitempty"`
}

/* polymorph Image content-type false */

/* polymorph Image environmentReference false */

/* polymorph Image id false */

/* polymorph Image image-type false */

/* polymorph Image imported false */

/* polymorph Image originEnvironment false */

/* polymorph Image specifics false */

/* polymorph Image userid false */

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOriginEnvironment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageTypeContentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["disk-raw","disk-qcow2","disk-vmdk","docker-file","docker-image","packerfile"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeContentTypePropEnum = append(imageTypeContentTypePropEnum, v)
	}
}

const (
	// ImageContentTypeDiskRaw captures enum value "disk-raw"
	ImageContentTypeDiskRaw string = "disk-raw"
	// ImageContentTypeDiskQcow2 captures enum value "disk-qcow2"
	ImageContentTypeDiskQcow2 string = "disk-qcow2"
	// ImageContentTypeDiskVMDK captures enum value "disk-vmdk"
	ImageContentTypeDiskVMDK string = "disk-vmdk"
	// ImageContentTypeDockerFile captures enum value "docker-file"
	ImageContentTypeDockerFile string = "docker-file"
	// ImageContentTypeDockerImage captures enum value "docker-image"
	ImageContentTypeDockerImage string = "docker-image"
	// ImageContentTypePackerfile captures enum value "packerfile"
	ImageContentTypePackerfile string = "packerfile"
)

// prop value enum
func (m *Image) validateContentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeContentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateContentType(formats strfmt.Registry) error {

	if swag.IsZero(m.ContentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentTypeEnum("content-type", "body", m.ContentType); err != nil {
		return err
	}

	return nil
}

var imageTypeImageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["implicit","declarative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeImageTypePropEnum = append(imageTypeImageTypePropEnum, v)
	}
}

const (
	// ImageImageTypeImplicit captures enum value "implicit"
	ImageImageTypeImplicit string = "implicit"
	// ImageImageTypeDeclarative captures enum value "declarative"
	ImageImageTypeDeclarative string = "declarative"
)

// prop value enum
func (m *Image) validateImageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeImageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateImageType(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageType) { // not required
		return nil
	}

	// value enum
	if err := m.validateImageTypeEnum("image-type", "body", m.ImageType); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateOriginEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.OriginEnvironment) { // not required
		return nil
	}

	if m.OriginEnvironment != nil {

		if err := m.OriginEnvironment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originEnvironment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
