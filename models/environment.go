// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Environment environment
// swagger:model Environment

type Environment struct {

	// credentials
	Credentials *Credentials `json:"credentials,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// managementlayer
	Managementlayer *ManagementLayer `json:"managementlayer,omitempty"`

	// runtimetechnology
	Runtimetechnology *RuntimeTechnology `json:"runtimetechnology,omitempty"`

	// userid
	Userid string `json:"userid,omitempty"`
}

/* polymorph Environment credentials false */

/* polymorph Environment id false */

/* polymorph Environment managementlayer false */

/* polymorph Environment runtimetechnology false */

/* polymorph Environment userid false */

// Validate validates this environment
func (m *Environment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateManagementlayer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRuntimetechnology(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Environment) validateCredentials(formats strfmt.Registry) error {

	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {

		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *Environment) validateManagementlayer(formats strfmt.Registry) error {

	if swag.IsZero(m.Managementlayer) { // not required
		return nil
	}

	if m.Managementlayer != nil {

		if err := m.Managementlayer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("managementlayer")
			}
			return err
		}
	}

	return nil
}

func (m *Environment) validateRuntimetechnology(formats strfmt.Registry) error {

	if swag.IsZero(m.Runtimetechnology) { // not required
		return nil
	}

	if m.Runtimetechnology != nil {

		if err := m.Runtimetechnology.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runtimetechnology")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Environment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Environment) UnmarshalBinary(b []byte) error {
	var res Environment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
